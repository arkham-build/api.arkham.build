# Name of your application. Used to uniquely configure containers.
service: api-arkham-build

# Shared postgres environment variables
x-postgres_env_clear: &postgres_env_clear
  POSTGRES_DB: api_arkham_build_production
  POSTGRES_USER: postgres
  POSTGRES_PORT: 5432

# Name of the container image.
image: arkham-build/api.arkham.build

# Deploy to these servers.
servers:
  web:
    - 64.225.68.241
  cron:
    hosts:
      - 64.225.68.241
    cmd: sh -c "(env && cat config/crontab) | crontab - && crond -f"
    options:
      memory: 250m
      cpus: 0.5

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: api-v2.arkham.build
  # Proxy connects to your container on port 80 by default.
  app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: ghcr.io
  username:
    - KAMAL_REGISTRY_USERNAME
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= ENV["RBENV_VERSION"] || ENV["rvm_ruby_string"] || "#{RUBY_ENGINE}-#{RUBY_ENGINE_VERSION}" %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    <<: *postgres_env_clear
    CORS_ORIGINS: "https://arkham.build,*.arkham-build-prod.pages.dev"
    DBMATE_MIGRATIONS_DIR: /app/src/db/migrations
    DBMATE_SCHEMA_FILE: /app/src/db/schema.sql
    METADATA_LOCALES: "de,en,es,fr,ko,pl,ru,zh"
    METADATA_VERSION: 8
    NODE_ENV: production
    PORT: 3000
    POSTGRES_HOST: api-arkham-build-db
  secret:
    - INGEST_URL_ARKHAMDB_DECKLISTS
    - INGEST_URL_METADATA
    - POSTGRES_PASSWORD

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
ssh:
  user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:16-alpine
    host: 64.225.68.241
    port: 5432
    env:
      clear:
        <<: *postgres_env_clear
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data

logging:
  driver: "json-file"
  options:
    max-size: "100m"
    max-file: "3"

aliases:
  console: app exec --interactive --reuse --primary "sh"
  ingest: app exec --primary --reuse "npm run ingest"
  logs: app logs --follow
